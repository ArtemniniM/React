{"ast":null,"code":"var _jsxFileName = \"/Users/cristina/Desktop/js-task/react-tasks/jsx/src/App.js\";\nimport \"./App.css\";\n\n//  1. На входе статичный массив чисел. Отобразить на странице только чётные числа, каждое в\n// теге <li>.\n\n// function App() {\n//   const arr = [1, 2, 3, 4, 5];\n//   const res1 = arr.filter((el) => el % 2 === 0);\n//   const res2 = res1.map((el) => <li>{el}</li>);\n//   return <div>{res2}</div>;\n// }\n\n// export default App;\n\n// 2. На входе статичный массив строк. Отфильтровать и отобразить только те строки, длина\n// которых больше 5 символов. Вывести в виде списка.\n\n// function App() {\n//   const arr = [\"priv\", \"hello\", \"nihawqeo\"];\n//   const res1 = arr.filter((el) => el.length > 5);\n//   return (\n//     <div>\n//       <ul>\n//         {res1.map((el) => (\n//           <li>{el}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 3. На входе массив чисел. Отобразить сумму всех чисел на странице в теге <h3>.\n\n// function App() {\n//   const arr = [10, 20, 30, 40, 50];\n//   const res = arr.reduce((el, sum) => sum + el, 0);\n//   return (\n//     <div>\n//       <h3>{res}</h3>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 4. На входе массив строк. Преобразовать каждую строку в верхний регистр и отобразить на\n// странице.\n\n// function App() {\n//   const arr = [\"apple\", \"banana\", \"orange\"];\n//   const res = arr.map((el) => el.toUpperCase());\n//   return (\n//     <div>\n//       <ul>\n//         {res.map((el) => {\n//           return <li>{el}</li>;\n//         })}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 5. На входе массив булевых значений [true, false, true...]. Отобразить на странице в виде\n// (если true) и (если false).\n\n// function App() {\n//   const arr = [true, false, true];\n\n//   return <ul>{arr.map((el) => (el ? <li>✅</li> : <li>❌</li>))}</ul>;\n// }\n// export default App;\n\n// 6. На входе массив дат в формате строки. Отобразить только те, которые позже 2020 года.\n\n// function App() {\n//   const arr = [\"2023-01-01\", \"2020-09-08\", \"2025-03-25\"];\n\n//   const filteredDates = arr.filter((date) => new Date(date).getFullYear() > 2020);\n\n//   return (\n//     <ul>\n//       {filteredDates.map((el) => (\n//         <li>{el}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default App;\n\n// 7. На входе массив из строк и чисел. Отобразить строки с классом text, а числа с классом\n// number.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const arr = [\"orange\", 5, \"sun\", 10];\n  const res = arr.filter;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: res\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","App","arr","res","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cristina/Desktop/js-task/react-tasks/jsx/src/App.js"],"sourcesContent":["import \"./App.css\";\n\n//  1. На входе статичный массив чисел. Отобразить на странице только чётные числа, каждое в\n// теге <li>.\n\n// function App() {\n//   const arr = [1, 2, 3, 4, 5];\n//   const res1 = arr.filter((el) => el % 2 === 0);\n//   const res2 = res1.map((el) => <li>{el}</li>);\n//   return <div>{res2}</div>;\n// }\n\n// export default App;\n\n// 2. На входе статичный массив строк. Отфильтровать и отобразить только те строки, длина\n// которых больше 5 символов. Вывести в виде списка.\n\n// function App() {\n//   const arr = [\"priv\", \"hello\", \"nihawqeo\"];\n//   const res1 = arr.filter((el) => el.length > 5);\n//   return (\n//     <div>\n//       <ul>\n//         {res1.map((el) => (\n//           <li>{el}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 3. На входе массив чисел. Отобразить сумму всех чисел на странице в теге <h3>.\n\n// function App() {\n//   const arr = [10, 20, 30, 40, 50];\n//   const res = arr.reduce((el, sum) => sum + el, 0);\n//   return (\n//     <div>\n//       <h3>{res}</h3>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 4. На входе массив строк. Преобразовать каждую строку в верхний регистр и отобразить на\n// странице.\n\n// function App() {\n//   const arr = [\"apple\", \"banana\", \"orange\"];\n//   const res = arr.map((el) => el.toUpperCase());\n//   return (\n//     <div>\n//       <ul>\n//         {res.map((el) => {\n//           return <li>{el}</li>;\n//         })}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 5. На входе массив булевых значений [true, false, true...]. Отобразить на странице в виде\n// (если true) и (если false).\n\n// function App() {\n//   const arr = [true, false, true];\n\n//   return <ul>{arr.map((el) => (el ? <li>✅</li> : <li>❌</li>))}</ul>;\n// }\n// export default App;\n\n// 6. На входе массив дат в формате строки. Отобразить только те, которые позже 2020 года.\n\n// function App() {\n//   const arr = [\"2023-01-01\", \"2020-09-08\", \"2025-03-25\"];\n\n//   const filteredDates = arr.filter((date) => new Date(date).getFullYear() > 2020);\n\n//   return (\n//     <ul>\n//       {filteredDates.map((el) => (\n//         <li>{el}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default App;\n\n// 7. На входе массив из строк и чисел. Отобразить строки с классом text, а числа с классом\n// number.\n\nfunction App() {\n  const arr = [\"orange\", 5, \"sun\", 10];\n  const res = arr.filter\n  return (\n    <ul>{res}</ul>\n  )\n}\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;;AAElB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAAA,SAAAA,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;EACpC,MAAMC,GAAG,GAAGD,GAAG,CAACE,MAAM;EACtB,oBACEJ,OAAA;IAAAK,QAAA,EAAKF;EAAG;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAElB;AAACC,EAAA,GANQT,GAAG;AAOZ,eAAeA,GAAG;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}