{"ast":null,"code":"var _jsxFileName = \"/Users/cristina/Desktop/hschool/React/jsx/src/App.js\";\nimport \"./App.css\";\n\n//  1. На входе статичный массив чисел. Отобразить на странице только чётные числа, каждое в\n// теге <li>.\n\n// function App() {\n//   const arr = [1, 2, 3, 4, 5];\n//   const res1 = arr.filter((el) => el % 2 === 0);\n//   const res2 = res1.map((el) => <li>{el}</li>);\n//   return <div>{res2}</div>;\n// }\n\n// export default App;\n\n// 2. На входе статичный массив строк. Отфильтровать и отобразить только те строки, длина\n// которых больше 5 символов. Вывести в виде списка.\n\n// function App() {\n//   const arr = [\"priv\", \"hello\", \"nihawqeo\"];\n//   const res1 = arr.filter((el) => el.length > 5);\n//   return (\n//     <div>\n//       <ul>\n//         {res1.map((el) => (\n//           <li>{el}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 3. На входе массив чисел. Отобразить сумму всех чисел на странице в теге <h3>.\n\n// function App() {\n//   const arr = [10, 20, 30, 40, 50];\n//   const res = arr.reduce((el, sum) => sum + el, 0);\n//   return (\n//     <div>\n//       <h3>{res}</h3>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 4. На входе массив строк. Преобразовать каждую строку в верхний регистр и отобразить на\n// странице.\n\n// function App() {\n//   const arr = [\"apple\", \"banana\", \"orange\"];\n//   const res = arr.map((el) => el.toUpperCase());\n//   return (\n//     <div>\n//       <ul>\n//         {res.map((el) => {\n//           return <li>{el}</li>;\n//         })}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 5. На входе массив булевых значений [true, false, true...]. Отобразить на странице в виде\n// (если true) и (если false).\n\n// function App() {\n//   const arr = [true, false, true];\n\n//   return <ul>{arr.map((el) => (el ? <li>✅</li> : <li>❌</li>))}</ul>;\n// }\n// export default App;\n\n// 6. На входе массив дат в формате строки. Отобразить только те, которые позже 2020 года.\n\n// function App() {\n//   const arr = [\"2023-01-01\", \"2020-09-08\", \"2025-03-25\"];\n\n//   const filteredDates = arr.filter((date) => new Date(date).getFullYear() > 2020);\n\n//   return (\n//     <ul>\n//       {filteredDates.map((el) => (\n//         <li>{el}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default App;\n\n// 7. На входе массив из строк и чисел. Отобразить строки с классом text, а числа с классом\n// number.\n\n// function App() {\n//   const arr = [\"orange\", 5, \"sun\", 10];\n//   const res = arr.filter((el) => (typeof el === \"string\" ? \"text\" : \"number\")).map((el) => <li>{typeof el}</li>);\n//   return <ul>{res}</ul>;\n// }\n// export default App;\n\n// 8. На входе массив имён. Отобразить приветствие для каждого имени в формате: \"Привет,\n// [имя]!\" в теге <p>.\n\n// function App() {\n//   const arr = [\"artem\", \"masha\", \"oleg\"];\n\n//   return (\n//     <ul>\n//       {arr.map((el) => (\n//         <li>Привет,{el}!</li>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 9. На входе статичный массив чисел. Ваша задача каждое число массива возвести в квадрат и\n// отобразить на странице\n\n// function App() {\n//   const arr = [10, 20, 30];\n//   return (\n//     <ul>\n//       {arr.map((el) => (\n//         <li>{el * el}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 10. На входе статичный массив чисел. Ваша задача найти корень каждого числа и отобразить на\n// странице в виде h1\n\n// function App() {\n//   const arr = [10, 20, 30];\n//   return (\n//     <ul>\n//       {arr.map((el) => (\n//         <h1>{Math.sqrt(el)}</h1>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 11. На входе статичный массив строк. Ваша задача отфильтровать и отобразить на странице\n// только те строки, которые содержат знак @\n\n// function App() {\n//   const arr = [\"or@nge\", \"yellow\", \"t@ble\"];\n//   const filt = arr.filter((el) => el.includes(\"@\"));\n//   return (\n//     <ul>\n//       {filt.map((el) => (\n//         <li>{}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 12. На входе статичный массив строк. Ваша задача отобразить на странице все строки массива,\n// а также картинку. Каждая итерация будет возвращать\n// <div>\n//  <p>el</p>\n//  <img/>\n// </div>\n\n// import img from \"./assents/pig.png\";\n\n// function App() {\n//   const arr = [\"or@nge\", \"yellow\", \"t@ble\"];\n\n//   return (\n//     <div>\n//       {arr.map((el) => (\n//         <div>\n//           <p>{el}</p>\n//           <img src={img} />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n// export default App;\n\n// 13. На входе статичный массив чисел и букв. Ваша задача отобразить на странице в случае\n// числа четность и нечетность текущего значения в параграфе, в случае строки отобразить\n// саму строку в параграфе\n\n// function App() {\n//   const arr = [\"a\", 10, \"b\", 13];\n//   const res = arr.map((el) => {\n//     if (typeof el === \"string\") {\n//       return <p>{el}</p>;\n//     }\n//     return el % 2 == 0 ? <p>chet</p> : <p>nechet</p>;\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 14. На входе массив из объектов. каждый объект содержит title с названием фильма и\n// description с кратким описанием фильма. В h1 отобразить каждый title, в p - description\n\n// function App() {\n//   const arr = [\n//     { title: \"Interstellar\", description: \"about...\" },\n//     { title: \"Iron man\", description: \"about...\" },\n//   ];\n//   const res = arr.map((el) => (\n//     <div>\n//       <h1>{el.title}</h1>\n//       <p>{el.description}</p>\n//     </div>\n//   ));\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 15. На входе массив объектов { city: string, population: number }. Отобразить города, где\n// население больше 1 млн.\n\n// function App() {\n//   const arr = [\n//     { city: \"Minsk\", population: 10000000 },\n//     { city: \"Gomel\", population: 999999 },\n//     { city: \"Brest\", population: 14000000 },\n//   ];\n//   const res = arr.map((el) => {\n//     if (el.population > 1000000) {\n//       return (\n//         <div>\n//           <h1>{el.city}</h1>\n//         </div>\n//       );\n//     }\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 16. На входе массив чисел. Отобразить числа, которые делятся на 3 без остатка, в теге <span>.\n\n// function App() {\n//   const arr = [1, 2, 3, 6, 9];\n//   const res = arr.map((el) => {\n//     if (el % 3 === 0) {\n//       return <span>{el}</span>;\n//     }\n//   });\n//   return <spa>{res}</spa>;\n// }\n// export default App;\n\n// 17. На входе массив строк. Если строка содержит слово \"JS\" — отобразить её, иначе пропустить.\n\n// function App() {\n//   const arr = [\"app.JS\", \"index.JS\", \"return\"];\n//   const res = arr.map((el) => {\n//     if (el.includes(\"JS\")) return <div>{el}</div>;\n//   });\n//   return res;\n// }\n// export default App;\n\n// 18. На входе массив объектов { task: string, completed: boolean }. Отобразить все задачи.\n// Выполненные — зачёркнутыми.\n\n// function App() {\n//   const arr = [\n//     { task: \"Сделать форму регистрации\", completed: false },\n//     { task: \"Сверстать карточку товара\", completed: true },\n//     { task: \"Добавить валидацию\", completed: true },\n//   ];\n//   const res = arr.map((el) => {\n//     return (\n//       <div>\n//         <h1 style={{ textDecoration: el.completed ? \"line-through\" : \"none\" }}>{el.task}</h1>\n//       </div>\n//     );\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 19. На входе массив чисел. Каждое число возвести в куб и отобразить на странице в <h4>.\n\n// function App() {\n//   const arr = [1, 2, 3, 6, 9];\n//   const res = arr.map((el) => {\n//     return <h4>{Math.pow(el, 3)}</h4>;\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 20.На входе массив строк. Строки могут быть в разном регистре. Отобразить только уникальные\n// строки в нижнем регистре, отсортированные по алфавиту\n\n// function App() {\n//   const arr = [\"Apple\", \"banana\", \"BANANA\", \"Orange\", \"apple\", \"orange\"];\n//   const uniqueSorted = Array.from(new Set(arr.map((str) => str.toLowerCase()))).sort();\n//   return (\n//     <div>\n//       <ul>\n//         {uniqueSorted.map((str) => (\n//           <li>{str}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 21. На входе массив чисел. Разбить их на два массива: положительные и отрицательные.\n// Отобразить оба списка на странице.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const arr = [-1, -2, 4, -6, 7];\n  const plus = arr.filter(el => el > 0);\n  const minus = arr.filter(el => el < 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [\"h2\", plus.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: el\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: minus.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: el\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","App","arr","plus","filter","el","minus","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cristina/Desktop/hschool/React/jsx/src/App.js"],"sourcesContent":["import \"./App.css\";\n\n//  1. На входе статичный массив чисел. Отобразить на странице только чётные числа, каждое в\n// теге <li>.\n\n// function App() {\n//   const arr = [1, 2, 3, 4, 5];\n//   const res1 = arr.filter((el) => el % 2 === 0);\n//   const res2 = res1.map((el) => <li>{el}</li>);\n//   return <div>{res2}</div>;\n// }\n\n// export default App;\n\n// 2. На входе статичный массив строк. Отфильтровать и отобразить только те строки, длина\n// которых больше 5 символов. Вывести в виде списка.\n\n// function App() {\n//   const arr = [\"priv\", \"hello\", \"nihawqeo\"];\n//   const res1 = arr.filter((el) => el.length > 5);\n//   return (\n//     <div>\n//       <ul>\n//         {res1.map((el) => (\n//           <li>{el}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 3. На входе массив чисел. Отобразить сумму всех чисел на странице в теге <h3>.\n\n// function App() {\n//   const arr = [10, 20, 30, 40, 50];\n//   const res = arr.reduce((el, sum) => sum + el, 0);\n//   return (\n//     <div>\n//       <h3>{res}</h3>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 4. На входе массив строк. Преобразовать каждую строку в верхний регистр и отобразить на\n// странице.\n\n// function App() {\n//   const arr = [\"apple\", \"banana\", \"orange\"];\n//   const res = arr.map((el) => el.toUpperCase());\n//   return (\n//     <div>\n//       <ul>\n//         {res.map((el) => {\n//           return <li>{el}</li>;\n//         })}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 5. На входе массив булевых значений [true, false, true...]. Отобразить на странице в виде\n// (если true) и (если false).\n\n// function App() {\n//   const arr = [true, false, true];\n\n//   return <ul>{arr.map((el) => (el ? <li>✅</li> : <li>❌</li>))}</ul>;\n// }\n// export default App;\n\n// 6. На входе массив дат в формате строки. Отобразить только те, которые позже 2020 года.\n\n// function App() {\n//   const arr = [\"2023-01-01\", \"2020-09-08\", \"2025-03-25\"];\n\n//   const filteredDates = arr.filter((date) => new Date(date).getFullYear() > 2020);\n\n//   return (\n//     <ul>\n//       {filteredDates.map((el) => (\n//         <li>{el}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default App;\n\n// 7. На входе массив из строк и чисел. Отобразить строки с классом text, а числа с классом\n// number.\n\n// function App() {\n//   const arr = [\"orange\", 5, \"sun\", 10];\n//   const res = arr.filter((el) => (typeof el === \"string\" ? \"text\" : \"number\")).map((el) => <li>{typeof el}</li>);\n//   return <ul>{res}</ul>;\n// }\n// export default App;\n\n// 8. На входе массив имён. Отобразить приветствие для каждого имени в формате: \"Привет,\n// [имя]!\" в теге <p>.\n\n// function App() {\n//   const arr = [\"artem\", \"masha\", \"oleg\"];\n\n//   return (\n//     <ul>\n//       {arr.map((el) => (\n//         <li>Привет,{el}!</li>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 9. На входе статичный массив чисел. Ваша задача каждое число массива возвести в квадрат и\n// отобразить на странице\n\n// function App() {\n//   const arr = [10, 20, 30];\n//   return (\n//     <ul>\n//       {arr.map((el) => (\n//         <li>{el * el}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 10. На входе статичный массив чисел. Ваша задача найти корень каждого числа и отобразить на\n// странице в виде h1\n\n// function App() {\n//   const arr = [10, 20, 30];\n//   return (\n//     <ul>\n//       {arr.map((el) => (\n//         <h1>{Math.sqrt(el)}</h1>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 11. На входе статичный массив строк. Ваша задача отфильтровать и отобразить на странице\n// только те строки, которые содержат знак @\n\n// function App() {\n//   const arr = [\"or@nge\", \"yellow\", \"t@ble\"];\n//   const filt = arr.filter((el) => el.includes(\"@\"));\n//   return (\n//     <ul>\n//       {filt.map((el) => (\n//         <li>{}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n// export default App;\n\n// 12. На входе статичный массив строк. Ваша задача отобразить на странице все строки массива,\n// а также картинку. Каждая итерация будет возвращать\n// <div>\n//  <p>el</p>\n//  <img/>\n// </div>\n\n// import img from \"./assents/pig.png\";\n\n// function App() {\n//   const arr = [\"or@nge\", \"yellow\", \"t@ble\"];\n\n//   return (\n//     <div>\n//       {arr.map((el) => (\n//         <div>\n//           <p>{el}</p>\n//           <img src={img} />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n// export default App;\n\n// 13. На входе статичный массив чисел и букв. Ваша задача отобразить на странице в случае\n// числа четность и нечетность текущего значения в параграфе, в случае строки отобразить\n// саму строку в параграфе\n\n// function App() {\n//   const arr = [\"a\", 10, \"b\", 13];\n//   const res = arr.map((el) => {\n//     if (typeof el === \"string\") {\n//       return <p>{el}</p>;\n//     }\n//     return el % 2 == 0 ? <p>chet</p> : <p>nechet</p>;\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 14. На входе массив из объектов. каждый объект содержит title с названием фильма и\n// description с кратким описанием фильма. В h1 отобразить каждый title, в p - description\n\n// function App() {\n//   const arr = [\n//     { title: \"Interstellar\", description: \"about...\" },\n//     { title: \"Iron man\", description: \"about...\" },\n//   ];\n//   const res = arr.map((el) => (\n//     <div>\n//       <h1>{el.title}</h1>\n//       <p>{el.description}</p>\n//     </div>\n//   ));\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 15. На входе массив объектов { city: string, population: number }. Отобразить города, где\n// население больше 1 млн.\n\n// function App() {\n//   const arr = [\n//     { city: \"Minsk\", population: 10000000 },\n//     { city: \"Gomel\", population: 999999 },\n//     { city: \"Brest\", population: 14000000 },\n//   ];\n//   const res = arr.map((el) => {\n//     if (el.population > 1000000) {\n//       return (\n//         <div>\n//           <h1>{el.city}</h1>\n//         </div>\n//       );\n//     }\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 16. На входе массив чисел. Отобразить числа, которые делятся на 3 без остатка, в теге <span>.\n\n// function App() {\n//   const arr = [1, 2, 3, 6, 9];\n//   const res = arr.map((el) => {\n//     if (el % 3 === 0) {\n//       return <span>{el}</span>;\n//     }\n//   });\n//   return <spa>{res}</spa>;\n// }\n// export default App;\n\n// 17. На входе массив строк. Если строка содержит слово \"JS\" — отобразить её, иначе пропустить.\n\n// function App() {\n//   const arr = [\"app.JS\", \"index.JS\", \"return\"];\n//   const res = arr.map((el) => {\n//     if (el.includes(\"JS\")) return <div>{el}</div>;\n//   });\n//   return res;\n// }\n// export default App;\n\n// 18. На входе массив объектов { task: string, completed: boolean }. Отобразить все задачи.\n// Выполненные — зачёркнутыми.\n\n// function App() {\n//   const arr = [\n//     { task: \"Сделать форму регистрации\", completed: false },\n//     { task: \"Сверстать карточку товара\", completed: true },\n//     { task: \"Добавить валидацию\", completed: true },\n//   ];\n//   const res = arr.map((el) => {\n//     return (\n//       <div>\n//         <h1 style={{ textDecoration: el.completed ? \"line-through\" : \"none\" }}>{el.task}</h1>\n//       </div>\n//     );\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 19. На входе массив чисел. Каждое число возвести в куб и отобразить на странице в <h4>.\n\n// function App() {\n//   const arr = [1, 2, 3, 6, 9];\n//   const res = arr.map((el) => {\n//     return <h4>{Math.pow(el, 3)}</h4>;\n//   });\n//   return <div>{res}</div>;\n// }\n// export default App;\n\n// 20.На входе массив строк. Строки могут быть в разном регистре. Отобразить только уникальные\n// строки в нижнем регистре, отсортированные по алфавиту\n\n// function App() {\n//   const arr = [\"Apple\", \"banana\", \"BANANA\", \"Orange\", \"apple\", \"orange\"];\n//   const uniqueSorted = Array.from(new Set(arr.map((str) => str.toLowerCase()))).sort();\n//   return (\n//     <div>\n//       <ul>\n//         {uniqueSorted.map((str) => (\n//           <li>{str}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n// export default App;\n\n// 21. На входе массив чисел. Разбить их на два массива: положительные и отрицательные.\n// Отобразить оба списка на странице.\n\nfunction App() {\n  const arr = [-1, -2, 4, -6, 7];\n  const plus = arr.filter((el) => el > 0);\n  const minus = arr.filter((el) => el < 0);\n  return (\n    <div>\n      <ul>\n        h2\n        {plus.map((el) => (\n          <li>{el}</li>\n        ))}\n      </ul>\n      <ul>\n        {minus.map((el) => (\n          <li>{el}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;;AAElb,MAAMC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAC9B,MAAMC,IAAI,GAAGD,GAAG,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,GAAG,CAAC,CAAC;EACvC,MAAMC,KAAK,GAAGJ,GAAG,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,GAAG,CAAC,CAAC;EACxC,oBACEL,OAAA;IAAAO,QAAA,gBACEP,OAAA;MAAAO,QAAA,GAAI,IAEF,EAACJ,IAAI,CAACK,GAAG,CAAEH,EAAE,iBACXL,OAAA;QAAAO,QAAA,EAAKF;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACb,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLZ,OAAA;MAAAO,QAAA,EACGD,KAAK,CAACE,GAAG,CAAEH,EAAE,iBACZL,OAAA;QAAAO,QAAA,EAAKF;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACC,EAAA,GAnBQZ,GAAG;AAoBZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}